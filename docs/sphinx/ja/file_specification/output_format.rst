.. highlight:: none

.. _sec-output-format:

出力ファイル
---------------------------------

各種計算結果は ``output`` ディレクトリ以下に保存されます。
また、入力ファイルとして使ったファイルがコピーされます。

``parameters.dat``
=====================

実際に計算に使われたパラメータおよび実行日時が出力されます。

例
~~

::

   simple_num_step = 1000
   simple_inverse_lambda_cutoff = 1e-12

   full_num_step = 0
   full_inverse_projector_cutoff = 1e-12
   full_inverse_precision = 1e-12
   full_convergence_epsilon = 1e-12
   full_iteration_max = 1000
   full_gauge_fix = true
   full_fastfullupdate = true

   ctm_dimension = 9
   ctm_inverse_projector_cutoff = 1e-12
   ctm_convergence_epsilon = 1e-10
   ctm_iteration_max = 10
   ctm_projector_corner = false
   use_rsvd = false
   rsvd_oversampling_factor = 2

   seed = 11
   is_real = 1
   iszero_tol = 0
   tensor_load_dir = 
   tensor_save_dir = 
   outdir = output

   Lsub = [ 2 , 2 ]
   skew = 0

   start_datetime =  2020-03-21T17:04:06+09:00
   finish_datetime = 2020-03-21T17:04:08+09:00


``density.dat``
================

各種演算子のサイトあたりの期待値(実部と虚部)が出力されます。
各演算子の名前 ``name`` が空だった場合はかわりに演算子番号が出力されます。

例
~~

::

   Sz          =  6.11647102532908438e-03  0.00000000000000000e+00
   Sx          = -1.18125085038094907e-01  0.00000000000000000e+00
   hamiltonian = -5.43684776153081639e-01  0.00000000000000000e+00
   SzSz        = -3.16323622995942133e-01  0.00000000000000000e+00
   SxSx        = -8.55704529153783616e-02  0.00000000000000000e+00
   SySy        = -1.41790700241760936e-01  0.00000000000000000e+00


``onesite_obs.dat``
=====================

onesite 演算子の期待値 :math:`\langle\hat{A}^\alpha_i\rangle` が出力されます。
各行4列からなります。

1. 演算子の識別番号 :math:`\alpha`
2. サイトの番号 :math:`i`
3. 期待値の実部 :math:`\mathrm{Re}\langle\hat{A}^\alpha_i\rangle`
4. 期待値の虚部 :math:`\mathrm{Im}\langle\hat{A}^\alpha_i\rangle`

例
~~

::

   # $1: op_group
   # $2: site_index
   # $3: real
   # $4: imag

   0 0 3.76530616899634130e-01 -2.99603784556741935e-14
   0 1 -3.76509754722919920e-01 3.00680681515725412e-14
   0 2 -3.76530553357656839e-01 3.02876200904715373e-14
   0 3 3.76509691203749330e-01 -2.97993441043978597e-14
   1 0 2.83097867896386720e-05 -6.21066660268729473e-16
   1 1 -2.83466420461770130e-05 -8.15368057756069800e-17
   1 2 -2.83482100124389073e-05 3.48504667721631793e-16
   1 3 2.83082155246732127e-05 -1.53146658372287057e-16
   2 0 -5.10908316848065886e-05 -3.18447603113971937e-16
   2 1 5.11500132844305047e-05 2.55186152594026040e-17
   2 2 5.11528422294741045e-05 6.39101320470157777e-16
   2 3 -5.10879957978090937e-05 -2.65547621655117576e-16

``twosite_obs.dat``
======================

twosite 演算子の期待値が出力されます。
各行6列からなります。

1. twosite 演算子の識別番号
2. source サイトの番号
3. source からみた target のx 変位
4. source からみた target のy 変位
5. 期待値の実部
6. 期待値の虚部

例
~~

::

   # $1: op_group
   # $2: source_site
   # $3: dx
   # $4: dy
   # $5: real
   # $6: imag

   0 0 0 1 -3.34687360117867760e-01 2.68843730436328272e-14
   0 0 1 0 -3.30837879477270169e-01 2.57989265090129366e-14
   0 1 0 1 -3.34681128826821883e-01 2.69020083537152420e-14
   0 1 1 0 -3.32798087400507758e-01 2.66387741317542961e-14
   0 2 0 1 -3.36648943667345379e-01 2.61735500972987307e-14
   0 2 1 0 -3.30837927854314540e-01 2.64427835764587303e-14
   0 3 0 1 -3.36688835303625589e-01 2.64550560558367253e-14
   0 3 1 0 -3.32798142125971141e-01 2.64082512640410446e-14

``correlation.dat``
=====================

相関関数 :math:`C^{\alpha \beta}_i(x,y) \equiv \langle \hat{A}^\alpha(x_i,y_i) \hat{A}^\beta(x_i+x,y_i+y) \rangle` が出力されます。
各行7列から構成されます。

1. 左演算子の識別番号 :math:`\alpha`
2. 左演算子のサイト番号 :math:`i`
3. 右演算子の識別番号 :math:`\beta`
4. 右演算子のx方向変位 :math:`x`
5. 右演算子のy方向変位 :math:`y`
6. 演算子の実部 :math:`\mathrm{Re}C`
7. 演算子の虚部 :math:`\mathrm{Im}C`

例
~~

::

   # $1: left_op
   # $2: left_site
   # $3: right_op
   # $4: right_dx
   # $5: right_dy
   # $6: real
   # $7: imag

   0 0 0 1 0 -1.71759992763061836e-01 1.36428299157186382e-14 
   0 0 0 2 0 1.43751794649139675e-01 -1.14110668277268192e-14 
   0 0 0 3 0 -1.42375391377041444e-01 1.14103263451826963e-14 
   0 0 0 4 0 1.41835919840103741e-01 -1.11365361507372103e-14 
   0 0 0 5 0 -1.41783912096811515e-01 1.12856813523671142e-14 
   0 0 0 0 1 -1.72711348845767942e-01 1.40873628493918905e-14 
   0 0 0 0 2 1.43814797743900907e-01 -1.17958665742991377e-14 
   0 0 0 0 3 -1.42415176172922653e-01 1.22109610917000360e-14 
   0 0 0 0 4 1.41838862178711583e-01 -1.19321507524565005e-14 
   0 0 0 0 5 -1.41792935491960648e-01 1.23094733264734764e-14 
   1 0 1 1 0 -7.95389427681298805e-02 6.15901595234210079e-15 
   1 0 1 2 0 2.01916094009441903e-02 -1.27162373457160362e-15 
   ... Skipped ...
   2 3 2 0 5 -1.41888376278899312e-03 -2.38672137694415560e-16 


``correlation_length.dat``
=============================

相関長 :math:`\xi` が出力されます。
各行3+n列から構成されます。

1. 向き (``0: x, 1: y``)
2. x 向きの場合は :math:`y` 座標、y 向きの場合は :math:`y` 座標
3. 相関長 :math:`\xi = 1/e_1`

4列目以降は転送行列の固有値の絶対値の対数 :math:`e_i = -\log\left|\lambda_i/\lambda_0\right|` が出力されます (:math:`i>0`)。
この情報を利用することで相関長のボンド次元依存性を見積もれるかもしれません。
詳細は PRX **8**, 041033 (2018) と PRX **8**, 031030 (2018) を参照してください。

例
~~

::

   # $1: direction
   # $2: col or row index
   # $3: correlation length
   # $4-: eigenvalues e_i = -log|t_i/t_0|
   #      where i > 0 and t_i is i-th largest eigenvalue of T

   0 0 7.19213553469021272e-01 1.39040761283856007e+00 1.44013584036962405e+00 1.53522220522654251e+00
   0 1 7.19303527237354912e-01 1.39023369430805133e+00 1.39042786247674610e+00 1.53457094348925005e+00
   1 0 7.26232546918431754e-01 1.37696940772377285e+00 1.39968879441491767e+00 1.51923157420858113e+00
   1 1 7.26095712518373015e-01 1.37722890076244076e+00 1.38699264750702023e+00 1.52016493301531241e+00

``time.dat``
=====================

計算時間が出力されます。

例
~~

::

   time simple update = 1.64429
   time full update   = 0
   time environmnent  = 0.741858
   time observable    = 0.104487
