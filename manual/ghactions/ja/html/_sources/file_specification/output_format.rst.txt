.. highlight:: none

.. _sec-output-format:

出力ファイル
---------------------------------

各種計算結果は ``output`` ディレクトリ以下に保存されます。
また、入力ファイルとして使ったファイルがコピーされます。

``parameters.dat``
=====================

実際に計算に使われたパラメータおよび実行日時が出力されます。

例
~~

::

   simple_num_step = 1000
   simple_inverse_lambda_cutoff = 1e-12

   full_num_step = 0
   full_inverse_projector_cutoff = 1e-12
   full_inverse_precision = 1e-12
   full_convergence_epsilon = 1e-12
   full_iteration_max = 1000
   full_gauge_fix = true
   full_fastfullupdate = true

   ctm_dimension = 9
   ctm_inverse_projector_cutoff = 1e-12
   ctm_convergence_epsilon = 1e-10
   ctm_iteration_max = 10
   ctm_projector_corner = false
   use_rsvd = false
   rsvd_oversampling_factor = 2

   seed = 11
   is_real = 1
   iszero_tol = 0
   tensor_load_dir = 
   tensor_save_dir = 
   outdir = output

   Lsub = [ 2 , 2 ]
   skew = 0

   start_datetime =  2020-03-21T17:04:06+09:00
   finish_datetime = 2020-03-21T17:04:08+09:00


``density.dat``
================

各種演算子のサイトあたりの期待値(実部と虚部)が出力されます。
各演算子の名前 ``name`` が空だった場合はかわりに演算子番号が出力されます。

例
~~

::

   Sz          =  6.11647102532908438e-03  0.00000000000000000e+00
   Sx          = -1.18125085038094907e-01  0.00000000000000000e+00
   hamiltonian = -5.43684776153081639e-01  0.00000000000000000e+00
   SzSz        = -3.16323622995942133e-01  0.00000000000000000e+00
   SxSx        = -8.55704529153783616e-02  0.00000000000000000e+00
   SySy        = -1.41790700241760936e-01  0.00000000000000000e+00


``onesite_obs.dat``
=====================

onesite 演算子の期待値 :math:`\langle\hat{A}^\alpha_i\rangle = \langle\Psi | \hat{A}^\alpha_i | \Psi \rangle / \langle\Psi | \Psi \rangle` が出力されます。
各行4列からなります。

1. 演算子の識別番号 :math:`\alpha`
2. サイトの番号 :math:`i`
3. 期待値の実部 :math:`\mathrm{Re}\langle\hat{A}^\alpha_i\rangle`
4. 期待値の虚部 :math:`\mathrm{Im}\langle\hat{A}^\alpha_i\rangle`

補助的な情報として、演算子番号 -1 の量としてノルム :math:`\langle\Psi | \Psi \rangle` が出力されます。
ノルムの虚部が有限に残っている場合、計算になにか問題が起きています。
大抵の場合は、CTM のボンド次元が小さすぎることが原因です。

例
~~

::

   # $1: op_group
   # $2: site_index
   # $3: real
   # $4: imag

   0 0 4.08513219339284250e-01 -1.30821773764633317e-18
   0 1 -4.08513219339288636e-01 -6.09055344460395354e-20
   0 2 -4.08513219339289801e-01 -6.46773648122808868e-19
   0 3 4.08513219339286304e-01 -1.46983151052043956e-19
   1 0 -5.63321380968339106e-05 -1.06329584429579662e-18
   1 1 5.63321015724943072e-05 8.78344073011021613e-18
   1 2 5.63321015892866812e-05 4.36590453150828335e-18
   1 3 -5.63321381136249429e-05 -1.14509908259615756e-18
   2 0 7.95013947121512355e-06 -5.82669256660366468e-18
   2 1 -7.95019526521416614e-06 9.61281832688426906e-18
   2 2 -7.95019527785552810e-06 -9.34047696321987429e-18
   2 3 7.95013948581251836e-06 -6.49339357741872464e-19
   -1 0 1.04968851690174758e+00 7.97972798949331263e-17
   -1 1 1.04968851690174780e+00 7.65446733774766130e-17
   -1 2 1.04968851690174647e+00 8.32667268468867405e-17
   -1 3 1.04968851690174803e+00 7.41594285980085033e-17

``twosite_obs.dat``
======================

twosite 演算子の期待値が出力されます。
各行6列からなります。

1. twosite 演算子の識別番号
2. source サイトの番号
3. source からみた target のx 変位
4. source からみた target のy 変位
5. 期待値の実部
6. 期待値の虚部

補助的な情報として、演算子番号 -1 の量としてノルム :math:`\langle\Psi | \Psi \rangle` が出力されます。
ノルムの虚部が有限に残っている場合、計算になにか問題が起きています。
大抵の場合は、CTM のボンド次元が小さすぎることが原因です。

例
~~

::

   # $1: op_group
   # $2: source_site
   # $3: dx
   # $4: dy
   # $5: real
   # $6: imag

   0 0 0 1 -3.30408104727482554e-01 -3.63538996091175880e-19
   0 0 1 0 -3.26902334621655521e-01 -1.28557778331473411e-19
   0 1 0 1 -3.30408104727482110e-01 6.13195629489298286e-18
   0 1 1 0 -3.28820570518176758e-01 5.98724951760379135e-18
   0 2 0 1 -3.32375821733345012e-01 -5.42272048973129865e-18
   0 2 1 0 -3.26902334621652579e-01 9.69166076872613868e-20
   0 3 0 1 -3.32375821733344956e-01 5.07748884268378299e-18
   0 3 1 0 -3.28820570518176702e-01 4.86902738935337153e-18
   1 0 0 1 -1.87348767102901825e-01 4.90760305979372382e-19
      ... skipped ...
   -1 3 1 0 1.07465536687797147e+00 7.74120351154650166e-17

``correlation.dat``
=====================

相関関数 :math:`C^{\alpha \beta}_i(x,y) \equiv \langle \hat{A}^\alpha(x_i,y_i) \hat{A}^\beta(x_i+x,y_i+y) \rangle` が出力されます。
各行7列から構成されます。

1. 左演算子の識別番号 :math:`\alpha`
2. 左演算子のサイト番号 :math:`i`
3. 右演算子の識別番号 :math:`\beta`
4. 右演算子のx方向変位 :math:`x`
5. 右演算子のy方向変位 :math:`y`
6. 演算子の実部 :math:`\mathrm{Re}C`
7. 演算子の虚部 :math:`\mathrm{Im}C`

例
~~

::

   # $1: left_op
   # $2: left_site
   # $3: right_op
   # $4: right_dx
   # $5: right_dy
   # $6: real
   # $7: imag

   0 0 0 1 0 -1.71759992763061836e-01 1.36428299157186382e-14 
   0 0 0 2 0 1.43751794649139675e-01 -1.14110668277268192e-14 
   0 0 0 3 0 -1.42375391377041444e-01 1.14103263451826963e-14 
   0 0 0 4 0 1.41835919840103741e-01 -1.11365361507372103e-14 
   0 0 0 5 0 -1.41783912096811515e-01 1.12856813523671142e-14 
   0 0 0 0 1 -1.72711348845767942e-01 1.40873628493918905e-14 
   0 0 0 0 2 1.43814797743900907e-01 -1.17958665742991377e-14 
   0 0 0 0 3 -1.42415176172922653e-01 1.22109610917000360e-14 
   0 0 0 0 4 1.41838862178711583e-01 -1.19321507524565005e-14 
   0 0 0 0 5 -1.41792935491960648e-01 1.23094733264734764e-14 
   1 0 1 1 0 -7.95389427681298805e-02 6.15901595234210079e-15 
   1 0 1 2 0 2.01916094009441903e-02 -1.27162373457160362e-15 
   ... Skipped ...
   2 3 2 0 5 -1.41888376278899312e-03 -2.38672137694415560e-16 


``correlation_length.dat``
=============================

相関長 :math:`\xi` が出力されます。
各行3+n列から構成されます。

1. 向き (``0: x, 1: y``)
2. x 向きの場合は :math:`y` 座標、y 向きの場合は :math:`y` 座標
3. 相関長 :math:`\xi = 1/e_1`

4列目以降は転送行列の固有値の絶対値の対数 :math:`e_i = -\log\left|\lambda_i/\lambda_0\right|` が出力されます (:math:`i>0`)。
この情報を利用することで相関長のボンド次元依存性を見積もれるかもしれません。
詳細は PRX **8**, 041033 (2018) と PRX **8**, 031030 (2018) を参照してください。

例
~~

::

   # $1: direction
   # $2: col or row index
   # $3: correlation length
   # $4-: eigenvalues e_i = -log|t_i/t_0|
   #      where i > 0 and t_i is i-th largest eigenvalue of T

   0 0 7.19213553469021272e-01 1.39040761283856007e+00 1.44013584036962405e+00 1.53522220522654251e+00
   0 1 7.19303527237354912e-01 1.39023369430805133e+00 1.39042786247674610e+00 1.53457094348925005e+00
   1 0 7.26232546918431754e-01 1.37696940772377285e+00 1.39968879441491767e+00 1.51923157420858113e+00
   1 1 7.26095712518373015e-01 1.37722890076244076e+00 1.38699264750702023e+00 1.52016493301531241e+00

``time.dat``
=====================

計算時間が出力されます。

例
~~

::

   time simple update = 1.64429
   time full update   = 0
   time environmnent  = 0.741858
   time observable    = 0.104487
