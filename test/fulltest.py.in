# TeNeS - Massively parallel tensor network solver
# Copyright (C) 2019- The University of Tokyo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses

import subprocess
import sys
import os.path
from os.path import join
import shutil

import numpy as np

import toml


def check_density(resdir, refdir, *, rtol, atol):
    def read(filename):
        ret = []
        with open(filename) as f:
            for line in f:
                value = line.split('=')[1]
                re, im = value.split()
                ret.append(complex(float(re), float(im)))
        return ret

    res = read(join(resdir, "density.dat"))
    ref = read(join(refdir, "density.dat"))

    if len(res) != len(ref):
        print("density.dat: number of entries do not match")
        print("  result:    {}".format(len(res)))
        print("  reference: {}".format(len(ref)))
        return False

    fl = True
    for i, (s, f) in enumerate(zip(res, ref)):
        if type(s) != type(f) or not np.isclose(s, f, rtol=rtol, atol=atol):
            print("density.dat: {}-th data do not match:".format(i))
            print("  result:    ", s)
            print("  reference: ", f)
            fl = False
    return fl


def check(filename, resdir, refdir, *, rtol, atol):
    def read(filename):
        ret = []
        with open(filename) as f:
            for line in f:
                line = line.split("#")[0].strip()
                if not line:
                    continue
                words = line.split()
                ret.append(list(map(float, words)))
        return ret

    res = read(join(resdir, filename))
    ref = read(join(refdir, filename))

    if len(res) != len(ref):
        print("{}: number of entries do not match".format(filename))
        print("  result:    {}".format(len(res)))
        print("  reference: {}".format(len(ref)))
        return False

    fl = True
    for i, (rs, rf) in enumerate(zip(res, ref)):
        lfl = True
        for s, f in zip(rs, rf):
            if not np.isclose(s, f, rtol=rtol, atol=atol):
                lfl = False
        if not lfl:
            print("{}: {}-th data do not match:".format(filename, i))
            print("  result:    ", " ".join(map(str, rs)))
            print("  reference: ", " ".join(map(str, rf)))
            fl = False
    return fl


simplemode = sys.argv[1] == "--simple"
if simplemode:
    testname = sys.argv[2]
else:
    testname = sys.argv[1]

inputfile = join("data", "{}.toml".format(testname))

with open(inputfile) as f:
    param = toml.load(f)

resdir = param["parameter"]["general"]["output"]
if os.path.exists(resdir):
    shutil.rmtree(resdir)
refdir = join("data", resdir)

if simplemode:
    cmd = []
    cmd.append(join("@CMAKE_BINARY_DIR@", "tool", "tenes_simple"))
    cmd.append(inputfile)
    subprocess.call(cmd)

    cmd = []
    cmd.append(join("@CMAKE_BINARY_DIR@", "tool", "tenes_std"))
    cmd.append("std.toml")
    subprocess.call(cmd)

    cmd = []
    if "@MPIEXEC@":
        cmd.append("@MPIEXEC@")
        cmd.extend("@MPIEXEC_PREFLAGS@".split())
        cmd.append("@MPIEXEC_NUMPROC_FLAG@")
        cmd.append("1")
        cmd.extend("@MPIEXEC_POSTFLAGS@".split())
    cmd.append(join("@CMAKE_BINARY_DIR@", "src", "tenes"))
    cmd.append("input.toml")
    subprocess.call(cmd)
else:
    cmd = []
    if "@MPIEXEC@":
        cmd.append("@MPIEXEC@")
        cmd.extend("@MPIEXEC_PREFLAGS@".split())
        cmd.append("@MPIEXEC_NUMPROC_FLAG@")
        cmd.append("1")
        cmd.extend("@MPIEXEC_POSTFLAGS@".split())
    cmd.append(join("@CMAKE_BINARY_DIR@", "src", "tenes"))
    cmd.append(inputfile)
    subprocess.call(cmd)

atol = 1.0e-4
rtol = 1.0e-3

result = True

mode = param["parameter"]["general"].get("mode", "ground")
if mode.startswith("ground"):
    result = check_density(resdir, refdir, rtol=rtol, atol=atol) and result
    result = check("onesite_obs.dat", resdir, refdir, rtol=rtol, atol=atol) and result
    result = check("twosite_obs.dat", resdir, refdir, rtol=rtol, atol=atol) and result
    # result = check("correlation.dat", resdir, refdir, tol) and result
elif mode.startswith("time"):
    result = check("TE_density.dat", resdir, refdir, rtol=rtol, atol=atol) and result
    result = check("TE_onesite_obs.dat", resdir, refdir, rtol=rtol, atol=atol) and result
    result = check("TE_twosite_obs.dat", resdir, refdir, rtol=rtol, atol=atol) and result
elif mode.startswith("finite"):
    result = check("FT_density.dat", resdir, refdir, rtol=rtol, atol=atol) and result
    result = check("FT_onesite_obs.dat", resdir, refdir, rtol=rtol, atol=atol) and result
    result = check("FT_twosite_obs.dat", resdir, refdir, rtol=rtol, atol=atol) and result
else:
    raise ValueError("unknown mode: {}".format(mode))

if result:
    sys.exit(0)
else:
    sys.exit(1)
